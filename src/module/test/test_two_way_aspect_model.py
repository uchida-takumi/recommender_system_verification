#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import unittest
from .. import two_way_aspect_model

import numpy as np

"""プログラミング用
from src.module import two_way_aspect_model
import numpy as np
"""

class test_two_way_aspect_model(unittest.TestCase):
    
    def setUp(self):
        pass
    
    def test__two_way_aspect_model(self):
        """ 
        the test data is generated by obvious tendency.
        """
        # person-actorsの視聴回数行列で、person3,4はactor3をよく見る傾向がある。
        Npa = np.array([
                [3,3,3,0],
                [2,1,2,1],
                [1,2,3,1],
                [1,0,1,3],
                [0,1,0,2],                
                ])
        # 推定対象のmovie-actorsの出演行列を設定。
        # actor3が出演しているmovie1がperson3,4で高確率であれば、学習は正常と言える。
        Nma = np.array([
                [1,1,1,0],
                [0,0,0,1],
                ])
        
        Z = 2
        twam = two_way_aspect_model.two_way_aspect_model(Z)
        twam.core_two_way_aspect_model.fit_person_aspect(Npa)
        twam.core_two_way_aspect_model.fit_movie_aspect(Nma)
        Ppm = twam.core_two_way_aspect_model.get_Pp_m()
        
        # --- Assertion ---
        print(Ppm)
        ## person0,1,2 は movie0 が良い傾向にある            
        for i in [0,1,2]:
            self.assertTrue(Ppm[i, 0] > Ppm[i, 1])
        ## person3,4 は movie1 が良い傾向にある
        for i in [3,4]:
            self.assertTrue(Ppm[i, 0] < Ppm[i, 1])
        ## person0 - movie0 の確率が最大になっている必要がある
        self.assertTrue(Ppm[0, 0], Ppm.max())


    def test_two_way_aspect_model(self):
        """ 
        the test data is generated by obvious tendency.
        """
        # set Input
        Z = 3
        item_attributes = {'i0':[1,1,0,0], 'i1':[0,0,1,1], 'i2':[0,1,1,1]}
        user_ids = ['u0','u0','u3','u0','u0','u1','u2','u2']
        item_ids = ['i0','i0','i0','i1','i2','i1','i1','i2']
        values   = [   5,   5,   5,   1,   3,   2,   5,   3]

        # learn
        twam = two_way_aspect_model.two_way_aspect_model(item_attributes, Z)        
        twam.fit(user_ids, item_ids, values, postive_threshold=5)
        
        # 同じitemIDでuserごとの推定値の変化を確認する。
        same_items = twam.predict(['u0','u1','u2','u999'], ['i0','i0','i0','i0'])
        ## 'i0'に5をつけたことがある'u0'が最高確率である必要がある。
        self.assertEqual(same_items[0], same_items.max())
        ## 'u2'は'i0'とは全然属性が違う'i1'に最高スコアをつけ、'i0'に少し似ている'i2'では評価を落とした。よって'i0'にも低いスコアが推定されているべき。
        self.assertEqual(same_items[2], same_items.min())
        
            

    def tearDown(self):
        pass

if __name__ == '__main__':
    unittest.main()


